# Owner: Krzysztof Kowalczyk
# Purpose:
#   Parse the memory allocation data generated by debug allocator
#   and generate useful info out of it.

import sys

def usage():
    print "parse_allocations.py fileName"
    sys.exit(0)

if len(sys.argv)!=2:
    usage()

fileName = sys.argv[1]
fo = open(fileName,"rb")

print "i,size,totalSize"

count = 0
totalSize = 0
maxSize = 0
allocs = {}
while True:
    line = fo.readline()
    if 0==len(line):
        break
    lineParts = line.split()
    assert lineParts[0]=="-" or lineParts[0]=="+"
    fAlloc = True
    if lineParts[0]=="-":
        fAlloc = False
    addr = lineParts[1]
    if fAlloc:
        size = int(lineParts[2])
        file = lineParts[3]
        lineNo = lineParts[4]
    if fAlloc:
        allocs[addr] = (size, file, lineNo)
        totalSize += size
    else:
        if addr != "0x00000000": # bug in the logger, we log NULL frees as well
            size = allocs[addr][0]
            totalSize -= size # we substract here
            assert totalSize >= 0
            del allocs[addr]
    if totalSize > maxSize:
        maxSize = totalSize
    count += 1
    print "%d,%d,%d" % (count,size,totalSize)
fo.close()
sys.stderr.write("maxSize=%d\n" % maxSize)
for (leakAddr, leakInfo) in allocs.items():
    print "leak at %s of size %d at %s:%s" % (leakAddr, leakInfo[0], leakInfo[1], leakInfo[2])